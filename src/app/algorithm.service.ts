import { Injectable } from '@angular/core';
import { Subject, Combination, Priority, VerifierFunction, SubjectSelection, Transform } from './algorithm-interface';

@Injectable({
  providedIn: 'root'
})
export class AlgorithmService {

  constructor() { }

  /**
   * Recursive algorithm to generate a list of all possible combinations between subjects.
   * @param subjects      List of selected subjects
   * @param verifier      Callable function to determine whether it should be included or not
   * @param combination   Combination being generated by the current tree path
   * @returns All possible combinations of commissions of subjects
   */
  private searchCombinations(subjects: Subject[], verifier: VerifierFunction, combination: Combination = null) {

  }

  /**
   * Calculates the corresponding weight for a combination with the given priorities according
   * to the user's priority and subject selection.
   * @param combination       Combination being tested
   * @param priorities        Priorities being selected by the user
   * @param selectedSubjects  Subjects selected
   * @param transform         Transform function used for the weight algorithm
   */
  private computeWeight(combination: Combination, priorities: Priority[], selectedSubjects: SubjectSelection[], transform: Transform) {

  }

  /**
   * Algorithm that calculates the corresponding weight of each combination according to the user specifications.
   * @param priorities              List of priorities set by the user
   * @param combinationPriorities   List of priorities used by the current combination
   * @param subjects                List of subjects
   * @param transform               Callable function to transform values
   */
  private weightAlgorithm(priorities: Priority[], combinationPriorities: number[], subjects: Subject[], transform: Transform) {

  }

  /**
   * Returns a boolean, determining whether it should be included or not the combination.
   * @param combination Combination to be verified
   * @param priorities  List of priorities and criteria set by the user
   */
  private verifiesPriorities(combination: Combination, priorities: Priority[]) {

  }

  private getSuperposition(shedule1, schedule2) {

  }

  /**
   * Generates a list of all possible combinations, ordered by their weights which is calculated
   * by the weightAlgorithm according to the user's priorities.
   * @param subjects          List of all subjects
   * @param selectedSubjects  List of subjects selected
   * @param priorities        List of user's priorities
   */
  public schedulerAlgorithm(subjects: Subject[], selectedSubjects: SubjectSelection[], priorities: Priority[]) {

  }

  private quicksort(array, left, right, get = (element) => element, condition = (current, pivot) => current > pivot) {

  }
}
